image: python:3.9
stages:
  - generate_tf
  - plan_tf
  - apply_tf
 
variables:
  TERRAFORM_VERSION: "1.6.3" # Change this to the desired version

before_script: 
  - curl -LO "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
  - unzip "terraform_${TERRAFORM_VERSION}_linux_amd64.zip"
  - chmod +x terraform
  - mv terraform /usr/local/bin/

generate_terraform:
  stage: generate_tf
  script:
    - if [ -d TerraformArtifacts ]; then echo "TerraformArtifacts folder exists"; else mkdir TerraformArtifacts && echo "TerraformArtifacts folder created"; fi
    - if [ -d AzureResources ]; then echo "AzureResources folder exists"; else mkdir AzureResources && echo "AzureResources folder created"; fi
     # Run your Python script here to generate the .tf file  
    - python3 generateTerraformUsingTemplates.py

  allow_failure: false
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - "TerraformArtifacts/"
    
plan_terraform:
  stage: plan_tf
  script: 
    - python3 generateTerraformProviderBackend.py
    - json_content=$(cat "$CI_PROJECT_DIR/config.json")
    - cd TerraformArtifacts
    - apt-get update && apt-get install -y jq
     # Initialize and run Terraform using the files
    
    - terraform init 

    # Parse the JSON using jq to extract fields
    - |
      echo "$json_content" | jq -r '.[] | .resource_type, .resource_name, .resource_id' | while read -r resource_type && read -r resource_name && read -r resource_id; do
        echo "Importing Azure WAF Resource: $resource_name"

        import_output=$(terraform import "$resource_type.$resource_name" "$resource_id" 2>&1) || true

        if echo "$import_output" | grep -q "Import successful!" || echo "$import_output" | grep -q "Resource already managed by Terraform"; then
          echo "$import_output"
          echo "Import outcome accepted and continuing execution.."
        else
          echo "$import_output"
          exit 1
        fi
      done  
    # Run terraform plan and apply (be careful with this in a production environment)
    - terraform plan -out="waf.tfplan"
     
  needs:
    - job: generate_terraform
      artifacts: true
  allow_failure: false    
  dependencies:
    - generate_terraform  # Ensure the artifact job runs first    
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - "TerraformArtifacts/"
    
apply_terraform_configurations:
  stage: apply_tf
  script:
    - cd TerraformArtifacts 
    - terraform init -lockfile=readonly
    - terraform apply "waf.tfplan" 
    - rm -rf  .terraform.lock.hcl
  when: manual
  allow_failure: false
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - "TerraformArtifacts/"
