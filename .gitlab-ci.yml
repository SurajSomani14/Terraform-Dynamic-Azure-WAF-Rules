stages:
  - generate_tf
  - apply_tf

generate_tf:
  stage: generate_tf
  script:
    - mkdir TerraformArtifacts
     # Run your Python script here to generate the .tf file
    - python3 generateTerraformUsingTemplates.py
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - "TerraformArtifacts/"

apply_tf:
  stage: apply_tf
  dependencies:
    - generate_tf
  script:     
     # Install jq (JSON parser)
    - apt-get update && apt-get install -y jq
    # Set up Terraform (install and init)
    - curl -fsSL https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_arm64.zip -o terraform.zip
    - unzip terraform.zip
    - chmod +x terraform
    - mv terraform /usr/local/bin/
    - cd TerraformArtifacts
    - terraform --version
    - terraform init

    # Import existing Azure resources
    #- terraform import azurerm_web_application_firewall_policy.dscp-waf-policy /subscriptions/90a13e75-e07a-41b0-9438-4c3950cc72d3/resourceGroups/dscp-terraform-waf-rg/providers/Microsoft.Network/applicationGatewayWebApplicationFirewallPolicies/dscp-waf-policy
    # Read the entire "resources.json" file and parse it
    - json_content=$(cat "$CI_PROJECT_DIR/config.json")

    # Parse the JSON using jq to extract fields
    - |
      echo "$json_content" | jq -r '.[] | .resource_type, .resource_name, .resource_id' | while read -r resource_type && read -r resource_name && read -r resource_id; do
        echo "Resource Type: $resource_type"
        echo "Resource Name: $resource_name"
        echo "Resource ID: $resource_id"

        terraform import "$resource_type.$resource_name" "$resource_id"
      done  
    # Run terraform plan and apply (be careful with this in a production environment)
    - terraform plan -out="waf.tfplan"
    - terraform apply "waf.tfplan"
  artifacts:
    untracked: false
    expire_in: 30 days
    when: always
    paths:
      - "TerraformArtifacts/"

